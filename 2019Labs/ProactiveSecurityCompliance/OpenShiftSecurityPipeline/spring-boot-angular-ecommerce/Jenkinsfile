// Jenkinsfile
pipeline {
  agent { label 'maven' }


  stages {

    stage('Checkout the code') {
      steps {
       git url: "http://gogs-ocp-workshop.apps.cluster-${JENKINS_GUID}.${JENKINS_GUID}.openshiftworkshop.com/${JENKINS_GOGS_USER}/SecurityDemos.git"
      } // steps
    } // stage

    stage('Build the application') {
    steps {
         sh "mvn -Dmaven.test.skip=true clean package"
      } // steps
    } // stage

    stage('Run tests') {
    steps {
         sh "mvn test"
         junit 'target/surefire-reports/*.xml'
      } // steps

    } // stage

    stage('SonarQube Scan') {
      steps {
        sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube.ocp-workshop.svc:9000 -Dsonar.projectkey=${JENKINS_GOGS_USER}-ecommerce -Dsonar.projectName=\"${JENKINS_GOGS_USER} E-Commerce Project\""
      } // steps
    } // stage

    stage('Archive artifacts to nexus') {
      steps {
        sh "mvn --settings mvn.xml deploy -Dmaven.test.skip=true"
      } // steps
    } // stage

    stage('Dependency lookup (TODO)') {
      steps {
        echo "TODO"
      } // steps
    } // stage

    stage('Build Image') {
      steps {
        sh "oc new-build --name ecommerce --strategy=docker --binary || true"
        sh "mkdir deploy || true"
        sh "cp target/spring-boot-angular-ecommerce-0.0.1-SNAPSHOT.jar deploy"
        sh "cp Dockerfile deploy"
        sh "oc start-build ecommerce --from-dir=deploy --follow --wait"
      } // steps
    } // stage

    stage('OpenSCAP Scan (TODO)') {
      agent { label 'master' }
      steps {

      script {
         def remote = [:]
         remote.name = "bastion"
         remote.host = "bastion.${JENKINS_GUID}.openshiftworkshop.com"
         remote.allowAnyHosts = true
         remote.user="${JENKINS_GOGS_USER}"
         remote.password="${JENKINS_SSH_PASSWORD}"
         

         //sh "oc login -u ${JENKINS_GOGS_USER} -p r3dh4t1! --insecure-skip-tls-verify"
         sshCommand remote: remote, command: "oc login -u ${JENKINS_GOGS_USER} -p ${remote.password} --insecure-skip-tls-verify api.cluster-${JENKINS_GUID}.${JENKINS_GUID}.openshiftworkshop.com:6443"
         //sh "sshpass -p $ocpass ssh -oStrictHostKeyChecking=no -t ${JENKINS_GOGS_USER}@$ocp docker login -u ${JENKINS_GOGS_USER} -p " + '"$(oc whoami -t)"' + " docker-registry-default.default.svc"
         sshCommand remote: remote, command: "docker login -u ${JENKINS_GOGS_USER} -p " + '"$(oc whoami -t)"' + " image-registry-openshift-image-registry.apps.cluster-${JENKINS_GUID}.${JENKINS_GUID}.openshiftworkshop.com"
         //sh "sshpass -p $ocpass ssh -oStrictHostKeyChecking=no -t ${JENKINS_GOGS_USER}@$ocp docker pull docker-registry-default.apps.$ocp/${JENKINS_GOGS_USER}/tasks:latest"
         sshCommand remote: remote, command: "docker pull image-registry-openshift-image-registry.apps.cluster-${JENKINS_GUID}.${JENKINS_GUID}.openshiftworkshop.com/${JENKINS_GOGS_USER}/ecommerce:latest"
         //sh "sshpass -p $ocpass ssh -oStrictHostKeyChecking=no -t ${JENKINS_GOGS_USER}@$ocp sudo oscap-docker image docker-registry-default.apps.$ocp/${JENKINS_GOGS_USER}/tasks:latest xccdf eval --profile xccdf_org.ssgproject.content_profile_stig-rhel7-disa --report report.html /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml"
         sshCommand remote: remote, command: "sudo oscap-docker image image-registry-openshift-image-registry.apps.cluster-${JENKINS_GUID}.${JENKINS_GUID}.openshiftworkshop.com/${JENKINS_GOGS_USER}/ecommerce:latest xccdf eval --profile xccdf_org.ssgproject.content_profile_stig-rhel7-disa --report report.html /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml"
         sshGet remote: remote, from: "/home/${JENKINS_GOGS_USER}/report.html", into: 'openscap-report.html', override: true

         publishHTML([alwaysLinkToLastBuild: false, keepAll: false, reportDir: './', reportFiles: 'openscap-report.html', reportName: 'OpenSCAP Report', reportTitles: ''])
         archiveArtifacts 'openscap-report.html'
        } // script
      } // steps
    } // stage

    stage('Deploy') {
      steps {
        sh "oc new-app ecommerce || true"
        sh "oc set env dc/ecommerce JAVA_ARGS=/deployments/root.jar"
        sh "oc expose svc/ecommerce || true"
        sh "oc rollout status dc/ecommerce"
      } // steps
    } // stage

    stage('OWASP ZAP Scan (TODO)') {
      steps {
        echo "TODO"
      } // steps
    } // stage

  } // stages

} // pipeline